	AREA text, CODE, READONLY
		EXPORT Kalmanfilter_asm		
Kalmanfilter_asm

		; SETTING KALMANFILTER STATE
		; *** THE BLOCK BELOW SHOULD BE REMOVED WHEN STATE VARIBLES ARE ALREADY IN MEMORY
		;VMOV.F32 S1, #10
		;VMOV.F32 S2, #1
		;VDIV.F32 S1, S2, S1
		;VMOV.F32 S2, S1
		;MOV R3,#0x20000000
		;VSTR S1, [R3]		; q
		;VSTR S2, [R3, #4]	; r
		;VSTR S3, [R3, #12]	; P
;		VMOV.F32 S1, #30 	; USED TO SHOW STORE/LOAD ARE WORKING
;		VMOV.F32 S2, #30
;		VMOV.F32 S3, #30

		; STORE SOME VALUES IN MEMORY
		; *** THE BLOCK BELOW SHOULD BE REMOVED WHEN DATA ARE ALREADY IN MEMORY
		;ADD R1, R3, #40
		;VMOV.F32 S6, #10
		;VMOV.F32 S7, #9
		;VSTR S6, [R1]
		;VSTR S7, [R1, #4]
		;MOV R2, #2
		;ADD R0, R1, #40
		
		; GET STATE VARIABLES FROM MEMORY
		VLDR S1, [R3]		; q
		VLDR S2, [R3, #4]	; r
		VLDR S5, [R1]		; x
		VLDR S3, [R3, #12]	; P
		VLDR S4, [R3, #16]	; k
		
		; INITIALIZE COUNTER TO 1
		MOV R4, #1
		
		; MOVE R0 TO R5 TO KEEP R0 AND FOLLOW THE ARRAY USING R5
		MOV R5, R0
		
		VMOV.F32 S9, #1	; STORE 1 IN REGISTER FOR ARITHMETIC USES
		
		; update
UPDATE	VLDR S0, [R1]	; CONTAINS THE INPUT
		VADD.F32 S3, S3, S1	;P = P+Q
		VADD.F32 S6, S3, S1 ;TEMP = P+R
		VDIV.F32 S4, S3, S6	;K = P/P+R
		VSUB.F32 S6, S0, S5 ;TEMP = MEASUREMENT-X
		VMUL.F32 S7, S4, S6	;TEMP = K*(MEASUREMENT-X)
		VADD.F32 S5, S5, S7	;X = X+K*(MEASUREMENT-X)
		VNEG.F32 S8, S4		;TEMP = -K
		VADD.F32 S8, S8, S9	;TEMP = 1-K
		VMUL.F32 S3, S8, S3	;P = (1-K)*P
		VSTR S5, [R5]	; WRITE THE INPUT IN MEMORY
		ADD R5, R5, #4	; INCREMENT OUTPUT POINTER
		ADD R1, R1, #4	; INCREMENT INPUT POINTER
		ADD R4, #1		; INCREMENT COUNTER
		CMP R4, R2		; COMPARE ARRAY LENGTH VS COUNTER
		BLE UPDATE		; ARRAY LENGTH IS HIGHER THAN THE COUNTER, LOOP AGAIN
		
		; WRITING TO REGISTER TO READ THE OUTPUT
		; CAN BE REMOVED TO SPEED UP
		VLDM R0, {S10-S31}
		
	BX	LR;

	END