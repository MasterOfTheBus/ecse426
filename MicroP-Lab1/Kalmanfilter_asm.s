	AREA text, CODE, READONLY
		EXPORT Kalmanfilter_asm
			
Kalmanfilter_asm
		
	; initialize q (S1), r(S2) and p(S3) to 0.1	
	VMOV.F32 S1, #10
	VMOV.F32 S2, #1
	VDIV.F32 S1, S2, S1 ; TO GET 0.1, TRY LOAD FROM MEMORY, ADD, SUBT, DIV...
	
	VMOV.F32 S2, S1
	VMOV.F32 S3, S1

	; initialize k (S4) and x (S5) to 0.
	VSUB.F32 S4, S1, S2
	VMOV.F32 S5, S4
	
	MOV R1, #5			; ARRAY LENGTH, FOR TESTING ONLY~ 
	MOV	R2, #1			; INITIALIZE COUNTER TO 1
	
	; CREATING AN ARRAY OF INPUTS
	VMOV.F32 S9, #1
	VMOV.F32 S10, #2
	VMOV.F32 S11, #4
	VMOV.F32 S12, #8
	VMOV.F32 S13, #10
	VPUSH {S9-S13}
	
	
	; update
UPDATE	VPOP {S0}	; CONTAINS THE FIRST INPUT
		VADD.F32 S3, S3, S1
		VADD.F32 S5, S3, S1 ;P+R
		VDIV.F32 S4, S3, S5
		VSUB.F32 S6, S0, S5
		VMUL.F32 S7, S4, S6
		VADD.F32 S5, S5, S7
		VNEG.F32 S8, S4
		VADD.F32 S8, S8, S4
		VMUL.F32 S3, S8, S3
		ADD R2, #1	; INCREMENT COUNTER
		CMP R1, R2	; COMPARE ARRAY LENGTH VS COUNTER
		BHI UPDATE	; ARRAY LENGTH IS HIGHER THAN THE COUNTER, LOOP AGAIN
		
	
	BX	LR;

	END